JLabrad TODOs:

Server
- setting definitions
  - unpack arbitrarily complicated LabRAD types into structural Java types
  - make the constructed accepted type tags more pretty
- when an error happens inside a setting, include info in the returned message (which setting, etc.)
- message handlers (per context or global)
  - allow message handlers to be created declaratively, using annotations to set dispatch policy, etc.
- create server bean
- have connection bean fire RequestEvent
- handle context expiration messages
- generate code to call settings at runtime (rather than using reflection)

Deployment
- how to deploy JLabrad to developers
- how to deploy apps for desktop
- how to deploy apps with jnlp
- provide ssh tunneling capabilities

Client
- provide a means to clear the server/setting cache
  - clear the cache automatically when a server disconnects

Data
- add get* and set* methods that do not check types for use with vectorization

General
- flatten data outside the network thread, so that exceptions do not kill the network thread (and for performance)
- unflatten data in the network thread, because an error here _should_ kill the connection
- try to write things as interfaces, rather than concrete types.
- implement connection object, server, client, etc. as beans (ala delphi API)
- easier way to get at the results of a packet call, rather than indexing into the result
  for example, each addRecord call returns a Future<Data> that can be queried separately

Examples
- write some example clients and servers
